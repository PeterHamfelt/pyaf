INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signals': ['y'], 'Horizons': {'y': 48}}))
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['y'], 'Transformations': [('y', 'None', '_', 'T+S+R'), ('y', 'None', 'Diff_', 'T+S+R'), ('y', 'None', 'RelDiff_', 'T+S+R'), ('y', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'y', 'Horizon': 48, 'Transformation': 'Diff_y', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'y', 'Horizon': 48, 'Transformation': '_y', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'y', 'Horizon': 48, 'Transformation': 'RelDiff_y', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'y', 'Horizon': 48, 'Transformation': 'CumSum_y', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 7.41, ('TRAINING', {'Signal': 'y', 'Horizon': 48, 'Transformation': 'RelDiff_y', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 7.434, ('TRAINING', {'Signal': 'y', 'Horizon': 48, 'Transformation': 'Diff_y', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 15.511, ('TRAINING', {'Signal': 'y', 'Horizon': 48, 'Transformation': 'CumSum_y', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 15.585, ('TRAINING', {'Signal': 'y', 'Horizon': 48, 'Transformation': '_y', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 17.409, ('SIGNAL_TRAINING', {'Signals': ['y'], 'Transformations': [('y', 'None', '_', 'T+S+R'), ('y', 'None', 'Diff_', 'T+S+R'), ('y', 'None', 'RelDiff_', 'T+S+R'), ('y', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['y'], 'Transformations': [('y', [('y', 'None', 'CumSum_', 'T+S+R'), ('y', 'None', 'Diff_', 'T+S+R'), ('y', 'None', 'RelDiff_', 'T+S+R'), ('y', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'y', 'Transformations': [('y', 'None', 'CumSum_', 'T+S+R'), ('y', 'None', 'Diff_', 'T+S+R'), ('y', 'None', 'RelDiff_', 'T+S+R'), ('y', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.202, ('MODEL_SELECTION', {'Signal': 'y', 'Transformations': [('y', 'None', 'CumSum_', 'T+S+R'), ('y', 'None', 'Diff_', 'T+S+R'), ('y', 'None', 'RelDiff_', 'T+S+R'), ('y', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'y', 'Model': '_y_LinearTrend_residue_Cycle_24_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.916, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'y', 'Model': '_y_LinearTrend_residue_Cycle_24_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'y'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.881, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'y'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 4.001, ('FINALIZE_TRAINING', {'Signals': ['y'], 'Transformations': [('y', [('y', 'None', 'CumSum_', 'T+S+R'), ('y', 'None', 'Diff_', 'T+S+R'), ('y', 'None', 'RelDiff_', 'T+S+R'), ('y', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 21.416, ('TRAINING', {'Signals': ['y'], 'Horizons': {'y': 48}}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='ds' TimeMin=2020-07-10T18:00:00.000000 TimeMax=2020-07-24T01:00:00.000000 TimeDelta=<DateOffset: hours=1> Horizon=48
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='y' Length=449  Min=0.0 Max=19.0  Mean=8.290376 StdDev=5.017777
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_y' Min=0.0 Max=1.0  Mean=0.436336 StdDev=0.264094
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_y_LinearTrend_residue_Cycle_24_residue_NoAR' [LinearTrend + Cycle_24 + NoAR]
INFO:pyaf.std:TREND_DETAIL '_y_LinearTrend' [LinearTrend]
INFO:pyaf.std:CYCLE_DETAIL '_y_LinearTrend_residue_Cycle_24' [Cycle_24]
INFO:pyaf.std:AUTOREG_DETAIL '_y_LinearTrend_residue_Cycle_24_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_PERFS Fit STEP=1 {'MAPE': 0.7556, 'RMSE': 3.5297, 'MAE': 2.6677, 'MASE': 1.5269, 'RMSSE': 1.3873}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=1 {'MAPE': 2048339378.1457, 'RMSE': 4.3266, 'MAE': 3.5155, 'MASE': 2.1578, 'RMSSE': 1.8745}
INFO:pyaf.std:MODEL_PERFS Test STEP=1 {'MAPE': 0.4836, 'RMSE': 5.5255, 'MAE': 4.5099, 'MASE': 2.506, 'RMSSE': 2.1495}
INFO:pyaf.std:MODEL_PERFS Fit STEP=48 {'MAPE': 0.7556, 'RMSE': 3.5297, 'MAE': 2.6677, 'MASE': 1.5269, 'RMSSE': 1.3873}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=48 {'MAPE': 2048339378.1457, 'RMSE': 4.3266, 'MAE': 3.5155, 'MASE': 2.1578, 'RMSSE': 1.8745}
INFO:pyaf.std:MODEL_PERFS Test STEP=48 {'MAPE': 0.4836, 'RMSE': 5.5255, 'MAE': 4.5099, 'MASE': 2.506, 'RMSSE': 2.1495}
INFO:pyaf.std:MODEL_COMPLEXITY {'Decomposition': 'S', 'Transformation': 'S', 'Trend': 'S', 'Cycle': 'S', 'AR': 'S'} [SSSSS]
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LINEAR_RIDGE_TREND LinearTrend (0.410373, array([0.02258]))
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _y_LinearTrend_residue_Cycle_24 24 0.017572 {0: -0.267196, 1: -0.184922, 2: -0.268898, 3: -0.034952, 4: 0.066842, 5: 0.14246, 6: 0.201106, 7: 0.165314, 8: 0.210447, 9: 0.210376, 10: 0.218799, 11: 0.218728, 12: 0.188234, 13: 0.106528, 14: -0.020025, 15: -0.224259, 16: -0.260839, 17: -0.199506, 18: -0.272717, 19: -0.320323, 20: -0.090347, 21: -0.141073, 22: -0.056667, 23: 0.024464}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.std:TRAINING_TIME_IN_SECONDS 21.416
INFO:pyaf.std:COMPETITION_DETAIL_START 'y'
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'y' 0 {'Transformation': '_y', 'DecompositionType': 'T+S+R', 'Model': '_y_LinearTrend_residue_Cycle_24_residue_NoAR', 'Voting': 1737.75, 'Complexity': 'SSSSS', 'Forecast_RMSSE_1': 1.8745, 'Forecast_RMSSE_H': 1.8745}
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'y' 1 {'Transformation': '_y', 'DecompositionType': 'T+S+R', 'Model': '_y_LinearTrend_residue_Seasonal_Hour_residue_NoAR', 'Voting': 1737.75, 'Complexity': 'SSSSS', 'Forecast_RMSSE_1': 1.8745, 'Forecast_RMSSE_H': 1.8745}
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'y' 2 {'Transformation': '_y', 'DecompositionType': 'T+S+R', 'Model': '_y_ConstantTrend_residue_Cycle_24_residue_NoAR', 'Voting': 1737.6667, 'Complexity': 'SSSSS', 'Forecast_RMSSE_1': 1.8778, 'Forecast_RMSSE_H': 1.8778}
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'y' 3 {'Transformation': '_y', 'DecompositionType': 'T+S+R', 'Model': '_y_ConstantTrend_residue_Seasonal_Hour_residue_NoAR', 'Voting': 1737.6667, 'Complexity': 'SSSSS', 'Forecast_RMSSE_1': 1.8778, 'Forecast_RMSSE_H': 1.8778}
INFO:pyaf.std:COMPETITION_DETAIL_END 'y'
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['y'], 'Horizon': 48}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.673, ('FORECASTING', {'Signals': ['y'], 'Horizon': 48}))


<ModelInfo>
{
    "Training_Time": 21.416,
    "y": {
        "Complexity": {
            "AR": "S",
            "Cycle": "S",
            "Decomposition": "S",
            "Transformation": "S",
            "Trend": "S"
        },
        "Dataset": {
            "Signal": "y",
            "Time": {
                "Horizon": 48,
                "TimeDelta": "<DateOffset: hours=1>",
                "TimeMax": "2020-07-29 10:00:00",
                "TimeMin": "2020-07-10 18:00:00",
                "TimeVariable": "ds"
            },
            "Training_Signal_Length": 449
        },
        "Model": {
            "AR_Model": "NoAR",
            "Best_Decomposition": "_y_LinearTrend_residue_Cycle_24_residue_NoAR",
            "Cycle": "Cycle_24",
            "Signal_Decomposition_Type": "T+S+R",
            "Signal_Transoformation": "NoTransf",
            "Trend": "LinearTrend"
        },
        "Model_Performance": {
            "1": {
                "AUC": 0.4585,
                "DiffSMAPE": 0.5537,
                "ErrorMean": 0.3288,
                "ErrorStdDev": 4.3141,
                "KS": 0.2469,
                "KendallTau": 0.3689,
                "Length": 81,
                "LnQ": Infinity,
                "MAE": 3.5155,
                "MAPE": 2048339378.1457,
                "MASE": 2.1578,
                "MannWhitneyU": 3008.0,
                "MedAE": 3.105,
                "Pearson": 0.5429,
                "R2": 0.2588,
                "RMSE": 4.3266,
                "RMSSE": 1.8745,
                "SMAPE": 0.5593,
                "Signal": "y_Forecast_1"
            },
            "48": {
                "AUC": 0.4585,
                "DiffSMAPE": 0.5537,
                "ErrorMean": 0.3288,
                "ErrorStdDev": 4.3141,
                "KS": 0.2469,
                "KendallTau": 0.3689,
                "Length": 81,
                "LnQ": Infinity,
                "MAE": 3.5155,
                "MAPE": 2048339378.1457,
                "MASE": 2.1578,
                "MannWhitneyU": 3008.0,
                "MedAE": 3.105,
                "Pearson": 0.5429,
                "R2": 0.2588,
                "RMSE": 4.3266,
                "RMSSE": 1.8745,
                "SMAPE": 0.5593,
                "Signal": "y_Forecast_48"
            }
        },
        "Model_Selection_Criterion": "RMSSE"
    }
}
</ModelInfo>


                    ds  ...  y_Forecast_Quantile_94
0  2020-07-10 18:00:00  ...                     NaN
1  2020-07-10 19:00:00  ...                     NaN
2  2020-07-10 20:00:00  ...                     NaN
3  2020-07-10 21:00:00  ...                     NaN
4  2020-07-10 22:00:00  ...                     NaN
5  2020-07-10 23:00:00  ...                     NaN
6  2020-07-11 00:00:00  ...                     NaN
7  2020-07-11 01:00:00  ...                     NaN
8  2020-07-11 02:00:00  ...                     NaN
9  2020-07-11 03:00:00  ...                     NaN
10 2020-07-11 04:00:00  ...                     NaN
11 2020-07-11 05:00:00  ...                     NaN
12 2020-07-11 06:00:00  ...                     NaN
13 2020-07-11 07:00:00  ...                     NaN
14 2020-07-11 08:00:00  ...                     NaN
15 2020-07-11 09:00:00  ...                     NaN
16 2020-07-11 10:00:00  ...                     NaN
17 2020-07-11 11:00:00  ...                     NaN
18 2020-07-11 12:00:00  ...                     NaN
19 2020-07-11 13:00:00  ...                     NaN
20 2020-07-11 14:00:00  ...                     NaN
21 2020-07-11 15:00:00  ...                     NaN
22 2020-07-11 16:00:00  ...                     NaN
23 2020-07-11 17:00:00  ...                     NaN
24 2020-07-11 18:00:00  ...                     NaN
25 2020-07-11 19:00:00  ...                     NaN
26 2020-07-11 20:00:00  ...                     NaN
27 2020-07-11 21:00:00  ...                     NaN
28 2020-07-11 22:00:00  ...                     NaN
29 2020-07-11 23:00:00  ...                     NaN
30 2020-07-12 00:00:00  ...                     NaN
31 2020-07-12 01:00:00  ...                     NaN
32 2020-07-12 02:00:00  ...                     NaN
33 2020-07-12 03:00:00  ...                     NaN
34 2020-07-12 04:00:00  ...                     NaN
35 2020-07-12 05:00:00  ...                     NaN
36 2020-07-12 06:00:00  ...                     NaN
37 2020-07-12 07:00:00  ...                     NaN
38 2020-07-12 08:00:00  ...                     NaN
39 2020-07-12 09:00:00  ...                     NaN
40 2020-07-12 10:00:00  ...                     NaN
41 2020-07-12 11:00:00  ...                     NaN
42 2020-07-12 12:00:00  ...                     NaN
43 2020-07-12 13:00:00  ...                     NaN
44 2020-07-12 14:00:00  ...                     NaN
45 2020-07-12 15:00:00  ...                     NaN
46 2020-07-12 16:00:00  ...                     NaN
47 2020-07-12 17:00:00  ...                     NaN

[48 rows x 34 columns]
INFO:pyaf.timing:('OPERATION_START', ('PLOTTING', {'Signals': ['y']}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 7.112, ('PLOTTING', {'Signals': ['y']}))
                     ds   y  ...  y_Forecast_Quantile_83  y_Forecast_Quantile_94
449 2020-07-29 11:00:00 NaN  ...                8.641666               11.760504
450 2020-07-29 12:00:00 NaN  ...                7.251994               10.370832
451 2020-07-29 13:00:00 NaN  ...                6.348825                9.467663
452 2020-07-29 14:00:00 NaN  ...               10.719717               13.838555
453 2020-07-29 15:00:00 NaN  ...                9.757276               12.876114
454 2020-07-29 16:00:00 NaN  ...               11.362323               14.481161
455 2020-07-29 17:00:00 NaN  ...               12.905164               16.024002
456 2020-07-29 18:00:00 NaN  ...                7.364964               10.483802
457 2020-07-29 19:00:00 NaN  ...                8.929518               12.048356
458 2020-07-29 20:00:00 NaN  ...                7.335328               10.454166
459 2020-07-29 21:00:00 NaN  ...               11.781630               14.900468
460 2020-07-29 22:00:00 NaN  ...               13.717077               16.835915
461 2020-07-29 23:00:00 NaN  ...               15.155164               18.274002
462 2020-07-30 00:00:00 NaN  ...               16.270774               19.389612
463 2020-07-30 01:00:00 NaN  ...               15.592077               18.710915
464 2020-07-30 02:00:00 NaN  ...               16.450938               19.569776
465 2020-07-30 03:00:00 NaN  ...               16.450938               19.569776
466 2020-07-30 04:00:00 NaN  ...               16.612323               19.731161
467 2020-07-30 05:00:00 NaN  ...               16.612323               19.731161
468 2020-07-30 06:00:00 NaN  ...               16.034271               19.153109
469 2020-07-30 07:00:00 NaN  ...               14.483215               17.602053
470 2020-07-30 08:00:00 NaN  ...               12.080046               15.198884
471 2020-07-30 09:00:00 NaN  ...                8.200938               11.319776
472 2020-07-30 10:00:00 NaN  ...                7.507276               10.626114
473 2020-07-30 11:00:00 NaN  ...                8.673943               11.792781
474 2020-07-30 12:00:00 NaN  ...                7.284271               10.403109
475 2020-07-30 13:00:00 NaN  ...                6.381102                9.499940
476 2020-07-30 14:00:00 NaN  ...               10.751994               13.870832
477 2020-07-30 15:00:00 NaN  ...                9.789553               12.908391
478 2020-07-30 16:00:00 NaN  ...               11.394600               14.513438
479 2020-07-30 17:00:00 NaN  ...               12.937441               16.056279
480 2020-07-30 18:00:00 NaN  ...                7.397241               10.516079
481 2020-07-30 19:00:00 NaN  ...                8.961795               12.080633
482 2020-07-30 20:00:00 NaN  ...                7.367605               10.486443
483 2020-07-30 21:00:00 NaN  ...               11.813907               14.932745
484 2020-07-30 22:00:00 NaN  ...               13.749353               16.868191
485 2020-07-30 23:00:00 NaN  ...               15.187441               18.306279
486 2020-07-31 00:00:00 NaN  ...               16.303051               19.421889
487 2020-07-31 01:00:00 NaN  ...               15.624353               18.743191
488 2020-07-31 02:00:00 NaN  ...               16.483215               19.602053
489 2020-07-31 03:00:00 NaN  ...               16.483215               19.602053
490 2020-07-31 04:00:00 NaN  ...               16.644600               19.763438
491 2020-07-31 05:00:00 NaN  ...               16.644600               19.763438
492 2020-07-31 06:00:00 NaN  ...               16.066548               19.185386
493 2020-07-31 07:00:00 NaN  ...               14.515492               17.634330
494 2020-07-31 08:00:00 NaN  ...               12.112323               15.231161
495 2020-07-31 09:00:00 NaN  ...                8.233215               11.352053
496 2020-07-31 10:00:00 NaN  ...                7.539553               10.658391

[48 rows x 34 columns]
