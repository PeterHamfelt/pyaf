INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:END_TRAINING_TIME_IN_SECONDS '['signal']' 0.8898546695709229
INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:END_TRAINING_TIME_IN_SECONDS '['signal']' 0.9219894409179688
INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:END_TRAINING_TIME_IN_SECONDS '['signal']' 0.74222731590271
INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:END_TRAINING_TIME_IN_SECONDS '['signal']' 0.7418217658996582
/home/travis/build/antoinecarme/pyaf/tests/basic_checks/issue_46_wrong_type_signal_column.py:13: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  for ty in [np.object , np.bool]:
/home/travis/build/antoinecarme/pyaf/tests/basic_checks/issue_46_wrong_type_signal_column.py:13: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  for ty in [np.object , np.bool]:
INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:START_TRAINING 'signal'
PYAF_ERROR_SIGNAL_COLUMN_TYPE_NOT_ALLOWED 'signal' 'object'
PYAF_ERROR_SIGNAL_COLUMN_TYPE_NOT_ALLOWED 'signal' 'bool'
PYAF_ERROR_SIGNAL_COLUMN_TYPE_NOT_ALLOWED 'signal' 'datetime64[ns]'
