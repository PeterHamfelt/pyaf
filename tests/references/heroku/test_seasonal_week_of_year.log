INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['Close'], 'Transformations': [('Close', 'None', '_', 'T+S+R'), ('Close', 'None', 'Diff_', 'T+S+R'), ('Close', 'None', 'RelDiff_', 'T+S+R'), ('Close', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
REQUEST_DETAILS [('CSVFile', 'https://raw.githubusercontent.com/antoinecarme/TimeSeriesData/a5fa96af431caabc817180d52bc1d01b8c61da41/YahooFinance/nasdaq/yahoo_GOOG.csv'), ('DateFormat', '%Y-%m-%d'), ('Horizon', 21), ('Name', 'PYAF_MODEL_DJOQFD_GOOG'), ('Present', '2016-01-01'), ('SignalVar', 'Close'), ('TimeVar', 'Date')]
None
DATASET_DETECTED_COLUMNS Index(['Unnamed: 0', 'Symbol', 'Date', 'Close', 'Low', 'Volume', 'Open',
       'Adj_Close', 'High'],
      dtype='object')
DATASET_FINAL_COLUMNS Index(['Unnamed: 0', 'Symbol', 'Date', 'Close', 'Low', 'Volume', 'Open',
       'Adj_Close', 'High'],
      dtype='object')
TRAIN_PARAMS (857, 9) Index(['Unnamed: 0', 'Symbol', 'Date', 'Close', 'Low', 'Volume', 'Open',
       'Adj_Close', 'High'],
      dtype='object') Date Close 21
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Close', 'Transformation': '_Close'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Close', 'Transformation': 'Diff_Close'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Close', 'Transformation': 'RelDiff_Close'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Close', 'Transformation': 'CumSum_Close'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 5.445, ('SIGNAL_TRAINING', {'Signals': ['Close'], 'Transformations': [('Close', 'None', '_', 'T+S+R'), ('Close', 'None', 'Diff_', 'T+S+R'), ('Close', 'None', 'RelDiff_', 'T+S+R'), ('Close', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['Close'], 'Transformations': [('Close', [('Close', 'None', 'CumSum_', 'T+S+R'), ('Close', 'None', 'Diff_', 'T+S+R'), ('Close', 'None', 'RelDiff_', 'T+S+R'), ('Close', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'Close', 'Transformations': [('Close', 'None', 'CumSum_', 'T+S+R'), ('Close', 'None', 'Diff_', 'T+S+R'), ('Close', 'None', 'RelDiff_', 'T+S+R'), ('Close', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.013, ('MODEL_SELECTION', {'Signal': 'Close', 'Transformations': [('Close', 'None', 'CumSum_', 'T+S+R'), ('Close', 'None', 'Diff_', 'T+S+R'), ('Close', 'None', 'RelDiff_', 'T+S+R'), ('Close', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'Close', 'Model': '_Close_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.043, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'Close', 'Model': '_Close_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'Close'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.537, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'Close'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.595, ('FINALIZE_TRAINING', {'Signals': ['Close'], 'Transformations': [('Close', [('Close', 'None', 'CumSum_', 'T+S+R'), ('Close', 'None', 'Diff_', 'T+S+R'), ('Close', 'None', 'RelDiff_', 'T+S+R'), ('Close', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['Close'], 'Horizon': 21}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.371, ('FORECASTING', {'Signals': ['Close'], 'Horizon': 21}))
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['Close'], 'Horizon': 21}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.347, ('FORECASTING', {'Signals': ['Close'], 'Horizon': 21}))
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None         _Close             T+S+R  ...  0.0109       0.0121   0.0102
1  None         _Close             T+S+R  ...  0.0109       0.0121   0.0102
2  None   CumSum_Close             T+S+R  ...  0.0113       0.0121   0.0102
3  None   CumSum_Close             T+S+R  ...  0.0113       0.0121   0.0102
4  None     Diff_Close             T+S+R  ...  0.0109       0.0121   0.0102

[5 rows x 10 columns]
Forecast Columns  Index(['Date', 'Close', 'row_number', 'Date_Normalized', '_Close',
       '_Close_Lag1Trend', '_Close_Lag1Trend_residue',
       '_Close_Lag1Trend_residue_bestCycle_byMAPE',
       '_Close_Lag1Trend_residue_bestCycle_byMAPE_residue',
       '_Close_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR',
       '_Close_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR_residue',
       '_Close_Trend', '_Close_Trend_residue', '_Close_Cycle',
       '_Close_Cycle_residue', '_Close_AR', '_Close_AR_residue',
       '_Close_TransformedForecast', 'Close_Forecast',
       '_Close_TransformedResidue', 'Close_Residue',
       'Close_Forecast_Lower_Bound', 'Close_Forecast_Upper_Bound',
       'Close_Forecast_Quantile_2', 'Close_Forecast_Quantile_10',
       'Close_Forecast_Quantile_18', 'Close_Forecast_Quantile_26',
       'Close_Forecast_Quantile_34', 'Close_Forecast_Quantile_42',
       'Close_Forecast_Quantile_50', 'Close_Forecast_Quantile_58',
       'Close_Forecast_Quantile_66', 'Close_Forecast_Quantile_74',
       'Close_Forecast_Quantile_82', 'Close_Forecast_Quantile_90',
       'Close_Forecast_Quantile_98'],
      dtype='object')
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 878 entries, 0 to 877
Data columns (total 3 columns):
 #   Column          Non-Null Count  Dtype         
---  ------          --------------  -----         
 0   Date            878 non-null    datetime64[ns]
 1   Close           857 non-null    float64       
 2   Close_Forecast  878 non-null    float64       
dtypes: datetime64[ns](1), float64(2)
memory usage: 20.7 KB
None
Forecasts
           Date  Close  Close_Forecast
857 2016-01-01    NaN      758.880005
858 2016-01-02    NaN      758.880005
859 2016-01-03    NaN      758.880005
860 2016-01-04    NaN      758.880005
861 2016-01-05    NaN      758.880005
862 2016-01-06    NaN      758.880005
863 2016-01-07    NaN      758.880005
864 2016-01-08    NaN      758.880005
865 2016-01-09    NaN      758.880005
866 2016-01-10    NaN      758.880005
867 2016-01-11    NaN      758.880005
868 2016-01-12    NaN      758.880005
869 2016-01-13    NaN      758.880005
870 2016-01-14    NaN      758.880005
871 2016-01-15    NaN      758.880005
872 2016-01-16    NaN      758.880005
873 2016-01-17    NaN      758.880005
874 2016-01-18    NaN      758.880005
875 2016-01-19    NaN      758.880005
876 2016-01-20    NaN      758.880005
877 2016-01-21    NaN      758.880005


<ModelInfo>
{
    "Close": {
        "Dataset": {
            "Signal": "Close",
            "Time": {
                "Horizon": 21,
                "TimeMinMax": [
                    "2012-08-06 00:00:00",
                    "2015-12-31 00:00:00"
                ],
                "TimeVariable": "Date"
            },
            "Training_Signal_Length": 857
        },
        "Model": {
            "AR_Model": "NoAR",
            "Best_Decomposition": "_Close_Lag1Trend_residue_bestCycle_byMAPE_residue_NoAR",
            "Cycle": "Cycle_None",
            "Signal_Decomposition_Type": "T+S+R",
            "Signal_Transoformation": "NoTransf",
            "Trend": "Lag1Trend"
        },
        "Model_Performance": {
            "COMPLEXITY": 2.0,
            "CRPS": 19.1163,
            "LnQ": 0.0676,
            "MAE": 7.5009,
            "MAPE": 0.0121,
            "MASE": 0.995,
            "MedAE": 4.595,
            "RMSE": 12.5124
        }
    }
}
</ModelInfo>




<Forecast>
{"Date":{"836":"2015-12-02T00:00:00.000Z","837":"2015-12-03T00:00:00.000Z","838":"2015-12-04T00:00:00.000Z","839":"2015-12-07T00:00:00.000Z","840":"2015-12-08T00:00:00.000Z","841":"2015-12-09T00:00:00.000Z","842":"2015-12-10T00:00:00.000Z","843":"2015-12-11T00:00:00.000Z","844":"2015-12-14T00:00:00.000Z","845":"2015-12-15T00:00:00.000Z","846":"2015-12-16T00:00:00.000Z","847":"2015-12-17T00:00:00.000Z","848":"2015-12-18T00:00:00.000Z","849":"2015-12-21T00:00:00.000Z","850":"2015-12-22T00:00:00.000Z","851":"2015-12-23T00:00:00.000Z","852":"2015-12-24T00:00:00.000Z","853":"2015-12-28T00:00:00.000Z","854":"2015-12-29T00:00:00.000Z","855":"2015-12-30T00:00:00.000Z","856":"2015-12-31T00:00:00.000Z","857":"2016-01-01T00:00:00.000Z","858":"2016-01-02T00:00:00.000Z","859":"2016-01-03T00:00:00.000Z","860":"2016-01-04T00:00:00.000Z","861":"2016-01-05T00:00:00.000Z","862":"2016-01-06T00:00:00.000Z","863":"2016-01-07T00:00:00.000Z","864":"2016-01-08T00:00:00.000Z","865":"2016-01-09T00:00:00.000Z","866":"2016-01-10T00:00:00.000Z","867":"2016-01-11T00:00:00.000Z","868":"2016-01-12T00:00:00.000Z","869":"2016-01-13T00:00:00.000Z","870":"2016-01-14T00:00:00.000Z","871":"2016-01-15T00:00:00.000Z","872":"2016-01-16T00:00:00.000Z","873":"2016-01-17T00:00:00.000Z","874":"2016-01-18T00:00:00.000Z","875":"2016-01-19T00:00:00.000Z","876":"2016-01-20T00:00:00.000Z","877":"2016-01-21T00:00:00.000Z"},"Close":{"836":762.380005,"837":752.539978,"838":766.809998,"839":763.25,"840":762.369995,"841":751.609985,"842":749.460022,"843":738.869995,"844":747.77002,"845":743.400024,"846":758.090027,"847":749.429993,"848":739.309998,"849":747.77002,"850":750.0,"851":750.309998,"852":748.400024,"853":762.51001,"854":776.599976,"855":771.0,"856":758.880005,"857":null,"858":null,"859":null,"860":null,"861":null,"862":null,"863":null,"864":null,"865":null,"866":null,"867":null,"868":null,"869":null,"870":null,"871":null,"872":null,"873":null,"874":null,"875":null,"876":null,"877":null},"Close_Forecast":{"836":767.039978,"837":762.380005,"838":752.539978,"839":766.809998,"840":763.25,"841":762.369995,"842":751.609985,"843":749.460022,"844":738.869995,"845":747.77002,"846":743.400024,"847":758.090027,"848":749.429993,"849":739.309998,"850":747.77002,"851":750.0,"852":750.309998,"853":748.400024,"854":762.51001,"855":776.599976,"856":771.0,"857":758.880005,"858":758.880005,"859":758.880005,"860":758.880005,"861":758.880005,"862":758.880005,"863":758.880005,"864":758.880005,"865":758.880005,"866":758.880005,"867":758.880005,"868":758.880005,"869":758.880005,"870":758.880005,"871":758.880005,"872":758.880005,"873":758.880005,"874":758.880005,"875":758.880005,"876":758.880005,"877":758.880005}}
</Forecast>


