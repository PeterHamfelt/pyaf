INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:END_TRAINING_TIME_IN_SECONDS '['signal']' 0.63637375831604
INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:END_TRAINING_TIME_IN_SECONDS '['signal']' 0.727562665939331
INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:END_TRAINING_TIME_IN_SECONDS '['signal']' 0.5083136558532715
INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:END_TRAINING_TIME_IN_SECONDS '['signal']' 0.5358884334564209
/home/circleci/project/tests/basic_checks/issue_46_wrong_type_date_column.py:13: DeprecationWarning: `np.object` is a deprecated alias for the builtin `object`. To silence this warning, use `object` by itself. Doing this will not modify any behavior and is safe. 
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  for ty in [np.object , np.bool]:
/home/circleci/project/tests/basic_checks/issue_46_wrong_type_date_column.py:13: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  for ty in [np.object , np.bool]:
INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:START_TRAINING 'signal'
INFO:pyaf.std:START_TRAINING 'signal'
PYAF_ERROR_TIME_COLUMN_TYPE_NOT_ALLOWED 'date' 'object'
PYAF_ERROR_TIME_COLUMN_TYPE_NOT_ALLOWED 'date' 'bool'
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1 entries, 0 to 0
Data columns (total 2 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   date    1 non-null      datetime64[ns]
 1   signal  1 non-null      float64       
dtypes: datetime64[ns](1), float64(1)
memory usage: 144.0 bytes
INFO:pyaf.std:END_TRAINING_TIME_IN_SECONDS '['signal']' 0.5181088447570801
