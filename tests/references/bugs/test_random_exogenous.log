/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/Bench/TS_datasets.py:319: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  tsspec.mExogenousDataFrame[label] = df_train['Signal'].apply(
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['Signal'], 'Transformations': [('Signal', 'None', '_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Transformation': '_Signal'}))
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/Exogenous.py:104: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mEncodedExogenousDataFrame[lDummyName] = np.where(
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 22.302, ('TRAINING', {'Signal': 'Signal', 'Transformation': '_Signal'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Transformation': 'Diff_Signal'}))
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/Exogenous.py:104: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mEncodedExogenousDataFrame[lDummyName] = np.where(
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 25.83, ('TRAINING', {'Signal': 'Signal', 'Transformation': 'Diff_Signal'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Transformation': 'RelDiff_Signal'}))
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/Exogenous.py:104: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mEncodedExogenousDataFrame[lDummyName] = np.where(
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 21.856, ('TRAINING', {'Signal': 'Signal', 'Transformation': 'RelDiff_Signal'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Transformation': 'CumSum_Signal'}))
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/Exogenous.py:104: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mEncodedExogenousDataFrame[lDummyName] = np.where(
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 23.683, ('TRAINING', {'Signal': 'Signal', 'Transformation': 'CumSum_Signal'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 93.677, ('SIGNAL_TRAINING', {'Signals': ['Signal'], 'Transformations': [('Signal', 'None', '_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['Signal'], 'Transformations': [('Signal', [('Signal', 'None', 'CumSum_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'Signal', 'Transformations': [('Signal', 'None', 'CumSum_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'Signal', 'Transformations': [('Signal', 'None', 'CumSum_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'Signal', 'Model': '_Signal_ConstantTrend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.025, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'Signal', 'Model': '_Signal_ConstantTrend_residue_bestCycle_byMAPE_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'Signal'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.128, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'Signal'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.16, ('FINALIZE_TRAINING', {'Signals': ['Signal'], 'Transformations': [('Signal', [('Signal', 'None', 'CumSum_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2000-01-01T00:00:00.000000 TimeMax=2000-04-29T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=5
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='Signal' Length=155  Min=8.098847796172965 Max=58.49248782940273  Mean=33.14382492371621 StdDev=14.639982108586441
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_Signal' Min=0.0 Max=1.0  Mean=0.4969868640373767 StdDev=0.2905124952063947
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_Signal_ConstantTrend_residue_bestCycle_byMAPE_residue_NoAR' [ConstantTrend + Cycle_12 + NoAR]
INFO:pyaf.std:TREND_DETAIL '_Signal_ConstantTrend' [ConstantTrend]
INFO:pyaf.std:CYCLE_DETAIL '_Signal_ConstantTrend_residue_bestCycle_byMAPE' [Cycle_12]
INFO:pyaf.std:AUTOREG_DETAIL '_Signal_ConstantTrend_residue_bestCycle_byMAPE_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.0221 MAPE_Forecast=0.0213 MAPE_Test=0.0187
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.0222 SMAPE_Forecast=0.0207 SMAPE_Test=0.0189
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.035 MASE_Forecast=0.028 MASE_Test=0.0723
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=4.631791193548164 CRPS_Forecast=4.396726141718773 CRPS_Test=3.705214178436639
INFO:pyaf.std:MODEL_L1 L1_Fit=0.5832310200500999 L1_Forecast=0.4995595917853744 L1_Test=0.7064122527004315
INFO:pyaf.std:MODEL_L2 L2_Fit=0.7279168980747371 L2_Forecast=0.6542804484918997 L2_Test=0.8539739139262794
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=0.11380585060039267 LnQ_Forecast=0.04278652146647649 LnQ_Test=0.0023947071670342166
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.5872829315102157 MedAE_Forecast=0.402130300803738 MedAE_Test=0.8868260386513782
INFO:pyaf.std:MODEL_COMPLEXITY 12.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:CONSTANT_TREND _Signal_ConstantTrend 0.49964889674200724
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _Signal_ConstantTrend_residue_bestCycle_byMAPE 12 0.05211092228379727 {0: -0.35226093777663336, 1: 0.11802160393745514, 2: 0.3517260811387712, 3: -0.35209158670318025, 4: -0.11445834580954947, 5: -0.46810812864453777, 6: -0.24192266777480453, 7: 0.11731105245352608, 8: -0.004063792681593598, 9: 0.2339751764639218, 10: 0.23164988455543012, 11: 0.47256238943407547}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.timing:('OPERATION_START', ('PLOTTING', {'Signals': ['Signal']}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 6.452, ('PLOTTING', {'Signals': ['Signal']}))
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['Signal'], 'Horizon': 5}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.092, ('FORECASTING', {'Signals': ['Signal'], 'Horizon': 5}))
GENERATING_RANDOM_DATASET Signal_160_D_0_constant_12_None_0.1_1280
TREND 0.0976270078546495 0.43037873274483895 0.20552675214328775
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 155 entries, 0 to 154
Data columns (total 7 columns):
 #   Column                                    Non-Null Count  Dtype         
---  ------                                    --------------  -----         
 0   Date                                      155 non-null    datetime64[ns]
 1   GeneratedTrend                            155 non-null    int64         
 2   GeneratedCycle                            155 non-null    float64       
 3   GeneratedAR                               155 non-null    int64         
 4   Noise                                     155 non-null    float64       
 5   Signal                                    155 non-null    float64       
 6   Signal_160_D_0_constant_12_None_0.1_1280  155 non-null    float64       
dtypes: datetime64[ns](1), float64(4), int64(2)
memory usage: 8.6 KB
Forecast Columns  Index(['Date', 'Signal', 'row_number', 'Date_Normalized', '_Signal',
       '_Signal_ConstantTrend', '_Signal_ConstantTrend_residue',
       'cycle_internal', '_Signal_ConstantTrend_residue_bestCycle_byMAPE',
       '_Signal_ConstantTrend_residue_bestCycle_byMAPE_residue',
       '_Signal_ConstantTrend_residue_bestCycle_byMAPE_residue_NoAR',
       '_Signal_ConstantTrend_residue_bestCycle_byMAPE_residue_NoAR_residue',
       '_Signal_Trend', '_Signal_Trend_residue', '_Signal_Cycle',
       '_Signal_Cycle_residue', '_Signal_AR', '_Signal_AR_residue',
       '_Signal_TransformedForecast', 'Signal_Forecast',
       '_Signal_TransformedResidue', 'Signal_Residue',
       'Signal_Forecast_Lower_Bound', 'Signal_Forecast_Upper_Bound',
       'Signal_Forecast_Quantile_10', 'Signal_Forecast_Quantile_30',
       'Signal_Forecast_Quantile_50', 'Signal_Forecast_Quantile_70',
       'Signal_Forecast_Quantile_90'],
      dtype='object')
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 160 entries, 0 to 159
Data columns (total 3 columns):
 #   Column           Non-Null Count  Dtype         
---  ------           --------------  -----         
 0   Date             160 non-null    datetime64[ns]
 1   Signal           155 non-null    float64       
 2   Signal_Forecast  160 non-null    float64       
dtypes: datetime64[ns](1), float64(2)
memory usage: 3.9 KB
None
Forecasts
 [[Timestamp('2000-06-04 00:00:00') nan 57.0921133879738]
 [Timestamp('2000-06-05 00:00:00') nan 15.526263545506456]
 [Timestamp('2000-06-06 00:00:00') nan 39.225512666558586]
 [Timestamp('2000-06-07 00:00:00') nan 51.002731964795856]
 [Timestamp('2000-06-08 00:00:00') nan 15.534797762541292]]


<ModelInfo>
{
    "Signal": {
        "Dataset": {
            "Signal": "Signal",
            "Time": {
                "Horizon": 5,
                "TimeMinMax": [
                    "2000-01-01 00:00:00",
                    "2000-06-03 00:00:00"
                ],
                "TimeVariable": "Date"
            },
            "Training_Signal_Length": 155
        },
        "Model": {
            "AR_Model": "NoAR",
            "Best_Decomposition": "_Signal_ConstantTrend_residue_bestCycle_byMAPE_residue_NoAR",
            "Cycle": "Cycle_12",
            "Signal_Decomposition_Type": "T+S+R",
            "Signal_Transoformation": "NoTransf",
            "Trend": "ConstantTrend"
        },
        "Model_Performance": {
            "COMPLEXITY": 12.0,
            "CRPS": 4.396726141718773,
            "LnQ": 0.04278652146647649,
            "MAE": 0.4995595917853744,
            "MAPE": 0.0213,
            "MASE": 0.028,
            "MedAE": 0.402130300803738,
            "RMSE": 0.6542804484918997
        }
    }
}
</ModelInfo>




<Forecast>
{"Date":{"150":"2000-05-30T00:00:00.000Z","151":"2000-05-31T00:00:00.000Z","152":"2000-06-01T00:00:00.000Z","153":"2000-06-02T00:00:00.000Z","154":"2000-06-03T00:00:00.000Z","155":"2000-06-04T00:00:00.000Z","156":"2000-06-05T00:00:00.000Z","157":"2000-06-06T00:00:00.000Z","158":"2000-06-07T00:00:00.000Z","159":"2000-06-08T00:00:00.000Z"},"Signal":{"150":21.3337844496,"151":40.3811523185,"152":33.9600111747,"153":46.2427986432,"154":44.9190042663,"155":null,"156":null,"157":null,"158":null,"159":null},"Signal_Forecast":{"150":21.0866106059,"151":39.1897053909,"152":33.073185136,"153":45.068835261,"154":44.9516553376,"155":57.092113388,"156":15.5262635455,"157":39.2255126666,"158":51.0027319648,"159":15.5347977625}}
</Forecast>


