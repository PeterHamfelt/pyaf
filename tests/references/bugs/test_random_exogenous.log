/home/antoine/dev/python/packages/timeseries/pyaf/tests/bugs/test_random_exogenous.py:13: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df[b1.mSignalVar] = df[b1.mName]
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signals': ['Signal'], 'Horizons': {'Signal': 5}}))
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['Signal'], 'Transformations': [('Signal', 'None', '_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Horizon': 5, 'Transformation': '_Signal', 'DecompositionType': 'T+S+R'}))
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 113.027, ('TRAINING', {'Signal': 'Signal', 'Horizon': 5, 'Transformation': '_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Horizon': 5, 'Transformation': 'Diff_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 4.759, ('TRAINING', {'Signal': 'Signal', 'Horizon': 5, 'Transformation': 'Diff_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Horizon': 5, 'Transformation': 'RelDiff_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 4.331, ('TRAINING', {'Signal': 'Signal', 'Horizon': 5, 'Transformation': 'RelDiff_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Horizon': 5, 'Transformation': 'CumSum_Signal', 'DecompositionType': 'T+S+R'}))
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:262: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mTrend.mOutName] = autoreg.mCycle.mTrendFrame[autoreg.mTrend.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:263: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[autoreg.mCycle.mOutName] = self.mCycleFrame[autoreg.mCycle.mOutName]
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:135: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mARFrame[self.mOutName] = self.mConstantValue;
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/SignalDecomposition_AR.py:40: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  df[self.mOutName + '_residue'] = lSignal - lTrend - lCycle - lAR
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 105.164, ('TRAINING', {'Signal': 'Signal', 'Horizon': 5, 'Transformation': 'CumSum_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 227.283, ('SIGNAL_TRAINING', {'Signals': ['Signal'], 'Transformations': [('Signal', 'None', '_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['Signal'], 'Transformations': [('Signal', [('Signal', 'None', 'CumSum_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'Signal', 'Transformations': [('Signal', 'None', 'CumSum_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.048, ('MODEL_SELECTION', {'Signal': 'Signal', 'Transformations': [('Signal', 'None', 'CumSum_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'Signal', 'Model': '_Signal_Lag1Trend_residue_Cycle_12_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.168, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'Signal', 'Model': '_Signal_Lag1Trend_residue_Cycle_12_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'Signal'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.17, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'Signal'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.386, ('FINALIZE_TRAINING', {'Signals': ['Signal'], 'Transformations': [('Signal', [('Signal', 'None', 'CumSum_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 227.675, ('TRAINING', {'Signals': ['Signal'], 'Horizons': {'Signal': 5}}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2000-01-01T00:00:00.000000 TimeMax=2000-04-29T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=5
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='Signal' Length=155  Min=13.412463 Max=163.870207  Mean=87.872339 StdDev=42.768798
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_Signal' Min=0.0 Max=1.0  Mean=0.494889 StdDev=0.284258
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_Signal_Lag1Trend_residue_Cycle_12_residue_NoAR' [Lag1Trend + Cycle_12 + NoAR]
INFO:pyaf.std:TREND_DETAIL '_Signal_Lag1Trend' [Lag1Trend]
INFO:pyaf.std:CYCLE_DETAIL '_Signal_Lag1Trend_residue_Cycle_12' [Cycle_12]
INFO:pyaf.std:AUTOREG_DETAIL '_Signal_Lag1Trend_residue_Cycle_12_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_PERFS Fit STEP=1 {'MAPE': 0.0293, 'RMSE': 1.7595, 'MAE': 1.3344, 'MASE': 0.3957}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=1 {'MAPE': 0.0099, 'RMSE': 1.7245, 'MAE': 1.4088, 'MASE': 0.3764}
INFO:pyaf.std:MODEL_PERFS Test STEP=1 {'MAPE': 0.0151, 'RMSE': 2.528, 'MAE': 2.4175, 'MASE': 0.6541}
INFO:pyaf.std:MODEL_PERFS Fit STEP=5 {'MAPE': 0.0408, 'RMSE': 2.1699, 'MAE': 1.6695, 'MASE': 0.4951}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=5 {'MAPE': 0.0116, 'RMSE': 2.0078, 'MAE': 1.624, 'MASE': 0.4339}
INFO:pyaf.std:MODEL_PERFS Test STEP=5 {'MAPE': 0.0106, 'RMSE': 2.3297, 'MAE': 1.6603, 'MASE': 0.4492}
INFO:pyaf.std:MODEL_COMPLEXITY {'Decomposition': 'S', 'Transformation': 'S', 'Trend': 'S', 'Cycle': 'S', 'AR': 'S'} [SSSSS]
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LAG1_TREND Lag1Trend 0.0
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:BEST_CYCLE_LENGTH_VALUES _Signal_Lag1Trend_residue_Cycle_12 12 0.011006 {0: -0.042545, 1: 0.035912, 2: 0.023315, 3: -0.034806, 4: 0.022002, 5: -0.018901, 6: 0.024835, 7: 0.022737, 8: 0.00203, 9: 0.022787, 10: 0.009225, 11: 0.015452}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.std:TRAINING_TIME_IN_SECONDS 227.675
INFO:pyaf.std:COMPETITION_DETAIL_START 'Signal'
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'Signal' 0 {'Transformation': '_Signal', 'DecompositionType': 'T+S+R', 'Model': '_Signal_Lag1Trend_residue_Cycle_12_residue_NoAR', 'Voting': 357.0, 'Complexity': 'SSSSS', 'Forecast_MASE_1': 0.3764, 'Forecast_MASE_H': 0.4339}
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'Signal' 1 {'Transformation': '_Signal', 'DecompositionType': 'T+S+R', 'Model': '_Signal_Lag1Trend_residue_Cycle_12_residue_AR(38)', 'Voting': 357.0, 'Complexity': 'LSSSS', 'Forecast_MASE_1': 0.3736, 'Forecast_MASE_H': 0.4293}
INFO:pyaf.std:COMPETITION_DETAIL_END 'Signal'
INFO:pyaf.timing:('OPERATION_START', ('PLOTTING', {'Signals': ['Signal']}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 4.878, ('PLOTTING', {'Signals': ['Signal']}))
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['Signal'], 'Horizon': 5}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.071, ('FORECASTING', {'Signals': ['Signal'], 'Horizon': 5}))
TRYING_TO_LOAD_RANDOM_DATASET Signal_160_D_0_constant_12_None_0.1_1280 data/ARTIFICIAL_DATA/160/Signal_160_D_0_constant_12_None_0.1_1280
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 155 entries, 0 to 154
Data columns (total 8 columns):
 #   Column                                    Non-Null Count  Dtype         
---  ------                                    --------------  -----         
 0   Unnamed: 0                                155 non-null    int64         
 1   Date                                      155 non-null    datetime64[ns]
 2   GeneratedTrend                            155 non-null    int64         
 3   GeneratedCycle                            155 non-null    float64       
 4   GeneratedAR                               155 non-null    float64       
 5   Noise                                     155 non-null    float64       
 6   Signal_160_D_0_constant_12_None_0.1_1280  155 non-null    float64       
 7   Signal                                    155 non-null    float64       
dtypes: datetime64[ns](1), float64(5), int64(2)
memory usage: 9.8 KB
Forecast Columns  Index(['Date', 'Signal', 'row_number', 'Date_Normalized', '_Signal',
       '_Signal_Lag1Trend', '_Signal_Lag1Trend_residue', 'cycle_internal',
       '_Signal_Lag1Trend_residue_Cycle_12',
       '_Signal_Lag1Trend_residue_Cycle_12_residue',
       '_Signal_Lag1Trend_residue_Cycle_12_residue_NoAR',
       '_Signal_Lag1Trend_residue_Cycle_12_residue_NoAR_residue',
       'Signal_Transformed', '_Signal_Trend', '_Signal_Trend_residue',
       '_Signal_Cycle', '_Signal_Cycle_residue', '_Signal_AR',
       '_Signal_AR_residue', '_Signal_TransformedForecast', 'Signal_Forecast',
       '_Signal_TransformedResidue', 'Signal_Residue',
       'Signal_Forecast_Lower_Bound', 'Signal_Forecast_Upper_Bound',
       'Signal_Forecast_Quantile_10', 'Signal_Forecast_Quantile_30',
       'Signal_Forecast_Quantile_50', 'Signal_Forecast_Quantile_70',
       'Signal_Forecast_Quantile_90'],
      dtype='object')
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 160 entries, 0 to 159
Data columns (total 3 columns):
 #   Column           Non-Null Count  Dtype         
---  ------           --------------  -----         
 0   Date             160 non-null    datetime64[ns]
 1   Signal           155 non-null    float64       
 2   Signal_Forecast  160 non-null    float64       
dtypes: datetime64[ns](1), float64(2)
memory usage: 3.9 KB
None
Forecasts
 [[Timestamp('2000-06-04 00:00:00') nan 166.19502476435702]
 [Timestamp('2000-06-05 00:00:00') nan 159.79379045282988]
 [Timestamp('2000-06-06 00:00:00') nan 165.19698544780326]
 [Timestamp('2000-06-07 00:00:00') nan 168.70490604427258]
 [Timestamp('2000-06-08 00:00:00') nan 163.468035157752]]


<ModelInfo>
{
    "Signal": {
        "Complexity": {
            "AR": "S",
            "Cycle": "S",
            "Decomposition": "S",
            "Transformation": "S",
            "Trend": "S"
        },
        "Dataset": {
            "Signal": "Signal",
            "Time": {
                "Horizon": 5,
                "TimeDelta": "<DateOffset: days=1>",
                "TimeMax": "2000-06-03 00:00:00",
                "TimeMin": "2000-01-01 00:00:00",
                "TimeVariable": "Date"
            },
            "Training_Signal_Length": 155
        },
        "Model": {
            "AR_Model": "NoAR",
            "Best_Decomposition": "_Signal_Lag1Trend_residue_Cycle_12_residue_NoAR",
            "Cycle": "Cycle_12",
            "Signal_Decomposition_Type": "T+S+R",
            "Signal_Transoformation": "NoTransf",
            "Trend": "Lag1Trend"
        },
        "Model_Performance": {
            "1": {
                "AUC": 0.4922,
                "DiffSMAPE": 0.0099,
                "ErrorMean": 0.0363,
                "ErrorStdDev": 1.7241,
                "KS": 0.1333,
                "KendallTau": 0.908,
                "Length": 30,
                "LnQ": 0.0046,
                "MAE": 1.4088,
                "MAPE": 0.0099,
                "MASE": 0.3764,
                "MannWhitneyU": 443.0,
                "MedAE": 1.3322,
                "Pearson": 0.9816,
                "R2": 0.9619,
                "RMSE": 1.7245,
                "RMSSE": 0.3834,
                "SMAPE": 0.0099,
                "Signal": "Signal_Forecast_1"
            },
            "5": {
                "AUC": 0.4967,
                "DiffSMAPE": 0.0116,
                "ErrorMean": 0.0961,
                "ErrorStdDev": 2.0055,
                "KS": 0.1,
                "KendallTau": 0.8943,
                "Length": 30,
                "LnQ": 0.0063,
                "MAE": 1.624,
                "MAPE": 0.0116,
                "MASE": 0.4339,
                "MannWhitneyU": 447.0,
                "MedAE": 1.5717,
                "Pearson": 0.9766,
                "R2": 0.9484,
                "RMSE": 2.0078,
                "RMSSE": 0.4464,
                "SMAPE": 0.0116,
                "Signal": "Signal_Forecast_5"
            }
        },
        "Model_Selection_Criterion": "MASE"
    },
    "Training_Time": 227.675
}
</ModelInfo>




<Forecast>
{"Date":{"150":"2000-05-30T00:00:00.000","151":"2000-05-31T00:00:00.000","152":"2000-06-01T00:00:00.000","153":"2000-06-02T00:00:00.000","154":"2000-06-03T00:00:00.000","155":"2000-06-04T00:00:00.000","156":"2000-06-05T00:00:00.000","157":"2000-06-06T00:00:00.000","158":"2000-06-07T00:00:00.000","159":"2000-06-08T00:00:00.000"},"Signal":{"150":153.7980432208,"151":160.9542402675,"152":158.5988310049,"153":160.2975291229,"154":163.8702071315,"155":null,"156":null,"157":null,"158":null,"159":null},"Signal_Forecast":{"150":155.5749388069,"151":157.2190498419,"152":161.2596774055,"153":162.0272500883,"154":161.6854869485,"155":166.1950247644,"156":159.7937904528,"157":165.1969854478,"158":168.7049060443,"159":163.4680351578}}
</Forecast>


