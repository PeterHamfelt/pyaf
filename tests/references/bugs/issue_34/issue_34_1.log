/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/Bench/TS_datasets.py:319: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  tsspec.mExogenousDataFrame[label] = df_train['Signal'].apply(
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['Signal_0.5'], 'Transformations': [('Signal_0.5', 'None', '_', 'T+S+R')], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal_0.5', 'Transformation': '_Signal_0.5'}))
/home/antoine/dev/python/packages/timeseries/pyaf/pyaf/TS/Exogenous.py:104: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead.  To get a de-fragmented frame, use `newframe = frame.copy()`
  self.mEncodedExogenousDataFrame[lDummyName] = np.where(
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.05, ('TRAINING', {'Signal': 'Signal_0.5', 'Transformation': '_Signal_0.5'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.052, ('SIGNAL_TRAINING', {'Signals': ['Signal_0.5'], 'Transformations': [('Signal_0.5', 'None', '_', 'T+S+R')], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'Signals': ['Signal_0.5'], 'Transformations': [('Signal_0.5', [('Signal_0.5', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signal': 'Signal_0.5', 'Transformations': [('Signal_0.5', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.007, ('MODEL_SELECTION', {'Signal': 'Signal_0.5', 'Transformations': [('Signal_0.5', 'None', '_', 'T+S+R')]}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'Signal_0.5', 'Model': '_Signal_0.5_LinearTrend_residue_Seasonal_DayOfWeek_residue_ARX(64)'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.113, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'Signal_0.5', 'Model': '_Signal_0.5_LinearTrend_residue_Seasonal_DayOfWeek_residue_ARX(64)'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'Signal_0.5'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.24, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'Signal_0.5'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.36, ('FINALIZE_TRAINING', {'Signals': ['Signal_0.5'], 'Transformations': [('Signal_0.5', [('Signal_0.5', 'None', '_', 'T+S+R')])], 'Cores': 1}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2000-01-01T00:00:00.000000 TimeMax=2002-03-10T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=12
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='Signal_0.5' Length=1012  Min=-0.9945154367282514 Max=3.2015395828134037  Mean=1.4876487862946524 StdDev=0.7211370240536641
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_Signal_0.5' Min=0.0 Max=1.0  Mean=0.5915471106701644 StdDev=0.1718607169580049
INFO:pyaf.std:EXOGENOUS_DATA ['exog_1', 'exog_2', 'exog_3', 'exog_4', 'exog_5', 'exog_6', 'exog_7', 'exog_8', 'exog_9', 'exog_10', 'exog_11', 'exog_12', 'exog_13', 'exog_14', 'exog_15', 'exog_16', 'exog_17', 'exog_18', 'exog_19', 'exog_20', 'exog_21', 'exog_22', 'exog_23', 'exog_24', 'exog_25', 'exog_26', 'exog_27', 'exog_28', 'exog_29', 'exog_30', 'exog_31', 'exog_32', 'exog_33', 'exog_34', 'exog_35', 'exog_36', 'exog_37', 'exog_38', 'exog_39', 'exog_40', 'exog_41', 'exog_42', 'exog_43', 'exog_44', 'exog_45', 'exog_46', 'exog_47', 'exog_48', 'exog_49', 'exog_50', 'exog_51', 'exog_52', 'exog_53', 'exog_54', 'exog_55', 'exog_56', 'exog_57', 'exog_58', 'exog_59', 'exog_60', 'exog_61', 'exog_62', 'exog_63', 'exog_64', 'exog_65', 'exog_66', 'exog_67', 'exog_68', 'exog_69', 'exog_70', 'exog_71', 'exog_72', 'exog_73', 'exog_74', 'exog_75', 'exog_76', 'exog_77', 'exog_78', 'exog_79', 'exog_80', 'exog_81', 'exog_82', 'exog_83', 'exog_84', 'exog_85', 'exog_86', 'exog_87', 'exog_88', 'exog_89', 'exog_90', 'exog_91', 'exog_92', 'exog_93', 'exog_94', 'exog_95', 'exog_96', 'exog_97', 'exog_98', 'exog_99', 'exog_100']
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_Signal_0.5_LinearTrend_residue_Seasonal_DayOfWeek_residue_ARX(64)' [LinearTrend + Seasonal_DayOfWeek + ARX]
INFO:pyaf.std:TREND_DETAIL '_Signal_0.5_LinearTrend' [LinearTrend]
INFO:pyaf.std:CYCLE_DETAIL '_Signal_0.5_LinearTrend_residue_Seasonal_DayOfWeek' [Seasonal_DayOfWeek]
INFO:pyaf.std:AUTOREG_DETAIL '_Signal_0.5_LinearTrend_residue_Seasonal_DayOfWeek_residue_ARX(64)' [ARX]
INFO:pyaf.std:MODEL_MAPE MAPE_Fit=0.7718 MAPE_Forecast=0.4621 MAPE_Test=69.3584
INFO:pyaf.std:MODEL_SMAPE SMAPE_Fit=0.314 SMAPE_Forecast=0.3186 SMAPE_Test=0.4535
INFO:pyaf.std:MODEL_MASE MASE_Fit=0.4128 MASE_Forecast=0.6166 MASE_Test=0.5128
INFO:pyaf.std:MODEL_CRPS CRPS_Fit=0.17228758929047538 CRPS_Forecast=0.12241692661959647 CRPS_Test=0.16004720366441907
INFO:pyaf.std:MODEL_L1 L1_Fit=0.336627393134449 L1_Forecast=0.43842915614766853 L1_Test=0.5411725604916559
INFO:pyaf.std:MODEL_L2 L2_Fit=0.42109547909115763 L2_Forecast=0.5361054865807566 L2_Test=0.6449044793487767
INFO:pyaf.std:MODEL_LnQ LnQ_Fit=inf LnQ_Forecast=inf LnQ_Test=47.26598190348922
INFO:pyaf.std:MODEL_MEDIAN_AE MedAE_Fit=0.28381216710283863 MedAE_Forecast=0.3958454011186384 MedAE_Test=0.45870927229329106
INFO:pyaf.std:MODEL_COMPLEXITY 208.0
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LINEAR_RIDGE_TREND LinearTrend (0.5476078181436366, array([0.0782289]))
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:SEASONAL_MODEL_VALUES _Signal_0.5_LinearTrend_residue_Seasonal_DayOfWeek 0.009712373011608433 {5: 0.0005530349079944097, 6: 0.008630457213329223, 0: 0.022079168103715408, 1: 0.026681296391228182, 2: 0.016053437155476635, 3: 0.011815630153303613, 4: 0.00527250131180651}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_COEFF 1 exog_73=0_Lag6 -0.19205161616992408
INFO:pyaf.std:AR_MODEL_COEFF 2 exog_26=0_Lag8 -0.1761273141375136
INFO:pyaf.std:AR_MODEL_COEFF 3 exog_17=0_Lag9 0.17403032521957118
INFO:pyaf.std:AR_MODEL_COEFF 4 exog_1=0_Lag9 -0.1726571876870251
INFO:pyaf.std:AR_MODEL_COEFF 5 exog_85=0_Lag1 0.1505994220511268
INFO:pyaf.std:AR_MODEL_COEFF 6 exog_22=0_Lag2 -0.14661249845122185
INFO:pyaf.std:AR_MODEL_COEFF 7 exog_26=0_Lag6 0.1423038387899738
INFO:pyaf.std:AR_MODEL_COEFF 8 exog_68=0_Lag7 0.13987135645039955
INFO:pyaf.std:AR_MODEL_COEFF 9 exog_11=0_Lag7 -0.1343746897327946
INFO:pyaf.std:AR_MODEL_COEFF 10 exog_94=0_Lag6 0.13379809739075893
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['Signal_0.5'], 'Horizon': 12}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.309, ('FORECASTING', {'Signals': ['Signal_0.5'], 'Horizon': 12}))
GENERATING_RANDOM_DATASET Signal_1024_D_0_constant_12_log_0.0_100
TREND 0.0976270078546495 0.43037873274483895 0.20552675214328775
  Split Transformation DecompositionType  ... FitMAPE ForecastMAPE TestMAPE
0  None    _Signal_0.5             T+S+R  ...  0.7718       0.4621  69.3584

[1 rows x 10 columns]
Forecast Columns  Index(['Date', 'Signal_0.5', 'row_number', 'Date_Normalized', '_Signal_0.5',
       '_Signal_0.5_LinearTrend', '_Signal_0.5_LinearTrend_residue',
       '_Signal_0.5_LinearTrend_residue_Seasonal_DayOfWeek',
       '_Signal_0.5_LinearTrend_residue_Seasonal_DayOfWeek_residue',
       'exog_1=0',
       ...
       'Signal_0.5_Forecast_Quantile_36', 'Signal_0.5_Forecast_Quantile_43',
       'Signal_0.5_Forecast_Quantile_50', 'Signal_0.5_Forecast_Quantile_57',
       'Signal_0.5_Forecast_Quantile_64', 'Signal_0.5_Forecast_Quantile_71',
       'Signal_0.5_Forecast_Quantile_78', 'Signal_0.5_Forecast_Quantile_85',
       'Signal_0.5_Forecast_Quantile_92', 'Signal_0.5_Forecast_Quantile_99'],
      dtype='object', length=141)
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 1024 entries, 0 to 1023
Data columns (total 3 columns):
 #   Column               Non-Null Count  Dtype         
---  ------               --------------  -----         
 0   Date                 1024 non-null   datetime64[ns]
 1   Signal_0.5           1012 non-null   float64       
 2   Signal_0.5_Forecast  1024 non-null   float64       
dtypes: datetime64[ns](1), float64(2)
memory usage: 24.1 KB
None
Forecasts
 [[Timestamp('2002-10-09 00:00:00') nan 1.517363889729302]
 [Timestamp('2002-10-10 00:00:00') nan 1.4390995165163398]
 [Timestamp('2002-10-11 00:00:00') nan 1.0058502959893578]
 [Timestamp('2002-10-12 00:00:00') nan 1.9091934826509507]
 [Timestamp('2002-10-13 00:00:00') nan 0.8050894095502819]
 [Timestamp('2002-10-14 00:00:00') nan 2.1533001260733924]
 [Timestamp('2002-10-15 00:00:00') nan 1.9103224001951629]
 [Timestamp('2002-10-16 00:00:00') nan 1.560058878855003]
 [Timestamp('2002-10-17 00:00:00') nan 1.4664614183247944]
 [Timestamp('2002-10-18 00:00:00') nan 1.4170546271987783]
 [Timestamp('2002-10-19 00:00:00') nan 2.5450174981968123]
 [Timestamp('2002-10-20 00:00:00') nan 1.3614414471197616]]


<ModelInfo>
{
    "Signal_0.5": {
        "Dataset": {
            "Signal": "Signal_0.5",
            "Time": {
                "Horizon": 12,
                "TimeMinMax": [
                    "2000-01-01 00:00:00",
                    "2002-10-08 00:00:00"
                ],
                "TimeVariable": "Date"
            },
            "Training_Signal_Length": 1012
        },
        "Model": {
            "AR_Model": "ARX",
            "Best_Decomposition": "_Signal_0.5_LinearTrend_residue_Seasonal_DayOfWeek_residue_ARX(64)",
            "Cycle": "Seasonal_DayOfWeek",
            "Signal_Decomposition_Type": "T+S+R",
            "Signal_Transoformation": "NoTransf",
            "Trend": "LinearTrend"
        },
        "Model_Performance": {
            "COMPLEXITY": 208.0,
            "CRPS": 0.12241692661959647,
            "LnQ": Infinity,
            "MAE": 0.43842915614766853,
            "MAPE": 0.4621,
            "MASE": 0.6166,
            "MedAE": 0.3958454011186384,
            "RMSE": 0.5361054865807566
        }
    }
}
</ModelInfo>




<Forecast>
{"Date":{"1000":"2002-09-27T00:00:00.000Z","1001":"2002-09-28T00:00:00.000Z","1002":"2002-09-29T00:00:00.000Z","1003":"2002-09-30T00:00:00.000Z","1004":"2002-10-01T00:00:00.000Z","1005":"2002-10-02T00:00:00.000Z","1006":"2002-10-03T00:00:00.000Z","1007":"2002-10-04T00:00:00.000Z","1008":"2002-10-05T00:00:00.000Z","1009":"2002-10-06T00:00:00.000Z","1010":"2002-10-07T00:00:00.000Z","1011":"2002-10-08T00:00:00.000Z","1012":"2002-10-09T00:00:00.000Z","1013":"2002-10-10T00:00:00.000Z","1014":"2002-10-11T00:00:00.000Z","1015":"2002-10-12T00:00:00.000Z","1016":"2002-10-13T00:00:00.000Z","1017":"2002-10-14T00:00:00.000Z","1018":"2002-10-15T00:00:00.000Z","1019":"2002-10-16T00:00:00.000Z","1020":"2002-10-17T00:00:00.000Z","1021":"2002-10-18T00:00:00.000Z","1022":"2002-10-19T00:00:00.000Z","1023":"2002-10-20T00:00:00.000Z"},"Signal_0.5":{"1000":1.0995345169,"1001":0.0015476707,"1002":1.9643576455,"1003":1.4631446834,"1004":1.7642396869,"1005":2.6590409575,"1006":2.134227951,"1007":2.6890093241,"1008":0.4476406123,"1009":1.7287494394,"1010":2.8519572473,"1011":1.7260918237,"1012":null,"1013":null,"1014":null,"1015":null,"1016":null,"1017":null,"1018":null,"1019":null,"1020":null,"1021":null,"1022":null,"1023":null},"Signal_0.5_Forecast":{"1000":1.8257225841,"1001":1.282991099,"1002":1.0109819648,"1003":2.1160449302,"1004":1.6662097348,"1005":2.2461178088,"1006":2.0780602593,"1007":2.2236153866,"1008":1.2631970885,"1009":1.5946189941,"1010":2.3999326402,"1011":1.2801547793,"1012":1.5173638897,"1013":1.4390995165,"1014":1.005850296,"1015":1.9091934827,"1016":0.8050894096,"1017":2.1533001261,"1018":1.9103224002,"1019":1.5600588789,"1020":1.4664614183,"1021":1.4170546272,"1022":2.5450174982,"1023":1.3614414471}}
</Forecast>


