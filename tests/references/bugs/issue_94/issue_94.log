INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signals': ['Signal'], 'Horizons': {'Signal': 7}}))
INFO:pyaf.timing:('OPERATION_START', ('SIGNAL_TRAINING', {'Signals': ['Signal'], 'Transformations': [('Signal', 'None', '_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Horizon': 7, 'Transformation': 'Diff_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Horizon': 7, 'Transformation': '_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Horizon': 7, 'Transformation': 'RelDiff_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_START', ('TRAINING', {'Signal': 'Signal', 'Horizon': 7, 'Transformation': 'CumSum_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 9.9, ('TRAINING', {'Signal': 'Signal', 'Horizon': 7, 'Transformation': 'Diff_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 11.909, ('TRAINING', {'Signal': 'Signal', 'Horizon': 7, 'Transformation': 'RelDiff_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 13.999, ('TRAINING', {'Signal': 'Signal', 'Horizon': 7, 'Transformation': 'CumSum_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 14.202, ('TRAINING', {'Signal': 'Signal', 'Horizon': 7, 'Transformation': '_Signal', 'DecompositionType': 'T+S+R'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 14.517, ('SIGNAL_TRAINING', {'Signals': ['Signal'], 'Transformations': [('Signal', 'None', '_', 'T+S+R'), ('Signal', 'None', 'Diff_', 'T+S+R'), ('Signal', 'None', 'RelDiff_', 'T+S+R'), ('Signal', 'None', 'CumSum_', 'T+S+R')], 'Cores': 4}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION', {'Signals': ['Signal'], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('VOTING_MODEL_SELECTION', {'Signal': 'Signal'}))
INFO:pyaf.timing:('OPERATION_START', ('MODEL_SELECTION_COMPUTE_VOTING_SCORES', 114))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.376, ('MODEL_SELECTION_COMPUTE_VOTING_SCORES', 114))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.457, ('VOTING_MODEL_SELECTION', {'Signal': 'Signal'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.457, ('MODEL_SELECTION', {'Signals': ['Signal'], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('FINALIZE_TRAINING', {'BestModels': [('Signal', '_Signal_LinearTrend_residue_Seasonal_DayOfWeek_residue_NoAR')], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_START', ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'Signal', 'Model': '_Signal_LinearTrend_residue_Seasonal_DayOfWeek_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.936, ('UPDATE_BEST_MODEL_PERFS', {'Signal': 'Signal', 'Model': '_Signal_LinearTrend_residue_Seasonal_DayOfWeek_residue_NoAR'}))
INFO:pyaf.timing:('OPERATION_START', ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'Signal'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 1.283, ('COMPUTE_PREDICTION_INTERVALS', {'Signal': 'Signal'}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 2.219, ('FINALIZE_TRAINING', {'BestModels': [('Signal', '_Signal_LinearTrend_residue_Seasonal_DayOfWeek_residue_NoAR')], 'Cores': 1}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 17.2, ('TRAINING', {'Signals': ['Signal'], 'Horizons': {'Signal': 7}}))
INFO:pyaf.std:TIME_DETAIL TimeVariable='Date' TimeMin=2016-01-25T00:00:00.000000 TimeMax=2016-11-01T00:00:00.000000 TimeDelta=<DateOffset: days=1> Horizon=7
INFO:pyaf.std:SIGNAL_DETAIL_ORIG SignalVariable='Signal' Length=360  Min=-1.073783 Max=28.6766  Mean=13.871177 StdDev=6.730734
INFO:pyaf.std:SIGNAL_DETAIL_TRANSFORMED TransformedSignalVariable='_Signal' Min=0.0 Max=1.0  Mean=0.502345 StdDev=0.22624
INFO:pyaf.std:DECOMPOSITION_TYPE 'T+S+R'
INFO:pyaf.std:BEST_TRANSOFORMATION_TYPE '_'
INFO:pyaf.std:BEST_DECOMPOSITION  '_Signal_LinearTrend_residue_Seasonal_DayOfWeek_residue_NoAR' [LinearTrend + Seasonal_DayOfWeek + NoAR]
INFO:pyaf.std:TREND_DETAIL '_Signal_LinearTrend' [LinearTrend]
INFO:pyaf.std:CYCLE_DETAIL '_Signal_LinearTrend_residue_Seasonal_DayOfWeek' [Seasonal_DayOfWeek]
INFO:pyaf.std:AUTOREG_DETAIL '_Signal_LinearTrend_residue_Seasonal_DayOfWeek_residue_NoAR' [NoAR]
INFO:pyaf.std:MODEL_PERFS Fit STEP=1 {'MAPE': 1.1278, 'RMSE': 5.8338, 'MAE': 4.9727, 'MASE': 2.1282}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=1 {'MAPE': 0.319, 'RMSE': 5.5348, 'MAE': 4.6336, 'MASE': 2.1001}
INFO:pyaf.std:MODEL_PERFS Test STEP=1 {'MAPE': 0.5017, 'RMSE': 7.3802, 'MAE': 7.339, 'MASE': 1.6252}
INFO:pyaf.std:MODEL_PERFS Fit STEP=7 {'MAPE': 1.1278, 'RMSE': 5.8338, 'MAE': 4.9727, 'MASE': 2.1282}
INFO:pyaf.std:MODEL_PERFS Forecast STEP=7 {'MAPE': 0.319, 'RMSE': 5.5348, 'MAE': 4.6336, 'MASE': 2.1001}
INFO:pyaf.std:MODEL_PERFS Test STEP=7 {'MAPE': 0.5017, 'RMSE': 7.3802, 'MAE': 7.339, 'MASE': 1.6252}
INFO:pyaf.std:MODEL_COMPLEXITY {'Decomposition': 'S', 'Transformation': 'S', 'Trend': 'S', 'Cycle': 'S', 'AR': 'S'} [SSSSS]
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_START
INFO:pyaf.std:SIGNAL_TRANSFORMATION_MODEL_VALUES NoTransf None
INFO:pyaf.std:SIGNAL_TRANSFORMATION_DETAIL_END
INFO:pyaf.std:TREND_DETAIL_START
INFO:pyaf.std:LINEAR_RIDGE_TREND LinearTrend (0.348775, array([0.234021]))
INFO:pyaf.std:TREND_DETAIL_END
INFO:pyaf.std:CYCLE_MODEL_DETAIL_START
INFO:pyaf.std:SEASONAL_MODEL_VALUES _Signal_LinearTrend_residue_Seasonal_DayOfWeek 0.007423 {0: -0.096941, 1: -0.080416, 2: -0.009727, 3: 0.015526, 4: 0.032072, 5: 0.066387, 6: 0.089718}
INFO:pyaf.std:CYCLE_MODEL_DETAIL_END
INFO:pyaf.std:AR_MODEL_DETAIL_START
INFO:pyaf.std:AR_MODEL_DETAIL_END
INFO:pyaf.std:TRAINING_TIME_IN_SECONDS 17.197
INFO:pyaf.std:COMPETITION_DETAIL_START 'Signal'
INFO:pyaf.std:COMPETITION_DETAIL_SHORT_LIST 'Signal' 0 {'Transformation': '_Signal', 'DecompositionType': 'T+S+R', 'Model': '_Signal_LinearTrend_residue_Seasonal_DayOfWeek_residue_NoAR', 'Voting': 411.1429, 'Complexity': 'SSSSS', 'Forecast_MASE_1': 2.1001, 'Forecast_MASE_H': 2.1001}
INFO:pyaf.std:COMPETITION_DETAIL_END 'Signal'
INFO:pyaf.timing:('OPERATION_START', ('PLOTTING', {'Signals': ['Signal']}))
INFO:pyaf.std:SAVING_PLOT ('Trend', 'outputs/issue_94_Signal_Trend_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Cycle', 'outputs/issue_94_Signal_Cycle_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('AR', 'outputs/issue_94_Signal_AR_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('TransformedForecast', 'outputs/issue_94_Signal_TransformedForecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('Forecast', 'outputs/issue_94_Signal_Forecast_decomp_output.png')
INFO:pyaf.std:SAVING_PLOT ('PredictionIntervals', 'outputs/issue_94_Signal_prediction_intervals_output.png')
INFO:pyaf.std:SAVING_PLOT ('Quantiles', 'outputs/issue_94_Signal_quantiles_output.png')
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 32.401, ('PLOTTING', {'Signals': ['Signal']}))
INFO:pyaf.timing:('OPERATION_START', ('FORECASTING', {'Signals': ['Signal'], 'Horizon': 7}))
INFO:pyaf.timing:('OPERATION_END_ELAPSED', 0.78, ('FORECASTING', {'Signals': ['Signal'], 'Horizon': 7}))
Index(['Date', 'Signal', 'row_number', 'Date_Normalized', 'scaled_Signal',
       '_Signal', '_Signal_LinearTrend', '_Signal_LinearTrend_residue',
       '_Signal_LinearTrend_residue_Seasonal_DayOfWeek',
       '_Signal_LinearTrend_residue_Seasonal_DayOfWeek_residue',
       '_Signal_LinearTrend_residue_Seasonal_DayOfWeek_residue_NoAR',
       '_Signal_LinearTrend_residue_Seasonal_DayOfWeek_residue_NoAR_residue',
       'Signal_Transformed', '_Signal_Trend', '_Signal_Trend_residue',
       '_Signal_Cycle', '_Signal_Cycle_residue', '_Signal_AR',
       '_Signal_AR_residue', '_Signal_TransformedForecast', 'Signal_Forecast',
       '_Signal_TransformedResidue', 'Signal_Residue',
       'Signal_Forecast_Lower_Bound', 'Signal_Forecast_Upper_Bound',
       'Signal_Forecast_Quantile_2', 'Signal_Forecast_Quantile_14',
       'Signal_Forecast_Quantile_26', 'Signal_Forecast_Quantile_38',
       'Signal_Forecast_Quantile_50', 'Signal_Forecast_Quantile_62',
       'Signal_Forecast_Quantile_74', 'Signal_Forecast_Quantile_86',
       'Signal_Forecast_Quantile_98'],
      dtype='object')
['2017-01-19T00:00:00.000000000' '2017-01-20T00:00:00.000000000'
 '2017-01-21T00:00:00.000000000' '2017-01-22T00:00:00.000000000'
 '2017-01-23T00:00:00.000000000' '2017-01-24T00:00:00.000000000'
 '2017-01-25T00:00:00.000000000']
[18.68387538 19.20088142 20.24655656 20.96544763 15.4370358  15.95344206
 18.08125121]
